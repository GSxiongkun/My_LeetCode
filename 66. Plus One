'''
Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.

You may assume the integer do not contain any leading zero, except the number 0 itself.

The digits are stored such that the most significant digit is at the head of the list.
'''
'''
解题思路：
题目解读：将一个整数按位拆分放到一个数组中，求给这个整数加1后的数组
（1）数组中存储的多位数[1 2 3...],高位在左边，低位在右边，不利于数组操作，先反转一次；
（2）由低位向高位判断，如果该位置是9,则将该位置0（9+1=10，该位为0，高位加1）；若不是9，则加1，将数组反转后即为所求
（3）若所有位都是9,加1后不断向下进位，则该数组所有位都被置0,最后需要给该数组额外添加一个高位1
'''

############## Python Code #############
class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        length = len(digits)
        digits.reverse() ## 个位放到前面，便于循环计算
        for i in range(length):
            if digits[i] == 9:
                digits[i] = 0
            else:
                digits[i] = digits[i]+1
                digits.reverse() ### 原址反转，返回值为None,不能直接 return digits.reverse()
                return digits
       
        return [1]+digits ##如果出现全9，digits则全0
