'''
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array nums = [1,1,2],
Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. 
It doesn't matter what you leave beyond the new length.
'''
'''
注意：本题题目要求不允许使用额外的空间，但是method1 和method2 都使用了额外的空间，
虽然可得到正确答案，但是不符合要求，也不能通过leetcode审查
'''

'''
解题思路 :
本题必须考虑不能使用额外空间这一条件；
设定一个指针，指向当前无重复数的最后位置，如果遇到新的数，就在该位置后添加该数；
最后判断该指针指向的位置，其前面都是无重复的数，即可得到无重复数的个数
'''
############## Python code （正确）#######################

class Solution(object):
 def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        if nums ==[]:
            return 0
           
        re = 0 
        length = len(nums)
        for i in range(1,length):
            if nums[i] != nums[re]:
                re += 1
                nums[re] = nums[i] ##原址更新数列，总共有length 个不同的数，都都放在前length 个位置
        return re +1 


'''
解题思路 method1 ：
利用 set 函数去重，在用 len 函数计算去重后的元素个数
'''
#############  Python code  method1 （不符题意）################
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return len(set(nums)) 
       
'''
解题思路 method2 ：
因为数组是已排序的，比较后一个数与前一个数是否相同，不同的话记录下来，最后计算总数目
'''
#############  Python code  method2 （不符题意）################
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if nums ==[]:
            return 0
           
        newlist = [nums[0]]   
        length = len(nums)
        for i in range(1,length):
            if nums[i] != nums[i-1]:
                newlist.append(nums[i])
        return len(newlist)
